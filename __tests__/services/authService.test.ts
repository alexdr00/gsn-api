import authService from 'services/authService';
import userRepo from 'repositories/userRepo';
import cognito from 'proxies/aws/cognito';
import { mocked } from 'ts-jest/utils';
import ServiceErrors from 'constants/errors/services';
import SessionManager from 'lib/SessionManager';
import mockSession from '../reusableMocks/mockSession';

jest.mock('proxies/aws/cognito');
jest.mock('repositories/userRepo');
jest.mock('lib/SessionManager');

describe('Auth Service', () => {
  const context: Record<string, any> = {};

  describe('Sign Up', () => {
    beforeEach(() => {
      context.signUpBody = {
        email: 'email@test.com',
        name: 'name test',
        password: 'Test password1',
      };
    });

    it('Makes a call to create a user in cognito', async () => {
      await authService.signUp(context.signUpBody);
      expect(cognito.signUp).toHaveBeenCalledWith(context.signUpBody);
    });

    it('Makes a call to create a user in the database', async () => {
      const { email, name } = context.signUpBody;

      await authService.signUp(context.signUpBody);
      const newUserData = { email, name };
      expect(userRepo.createUser).toHaveBeenCalledWith(newUserData);
    });

    it('Throws a descriptive error when it fails', async () => {
      const testError = new Error('Test error here!');
      mocked(cognito.signUp).mockImplementation(() => { throw testError; });

      try {
        await authService.signUp(context.signUpBody);
      } catch (error) {
        expect(error.name).toBe(ServiceErrors.SignUp.name);
        expect(error.message).toBe(ServiceErrors.SignUp.message);
      }
    });
  });

  describe('Sign In', () => {
    beforeEach(() => {
      context.signInBody = {
        email: 'email@test.com',
        password: 'Test password1',
      };
      context.session = mockSession;
      context.tokens = { idToken: 'id-token', refreshToken: 'refresh-token' };
    });

    it('Makes a call to cognito to authenticate the user and return a session and a payload', async () => {
      mocked(cognito.signIn).mockResolvedValue({ session: context.session, tokens: context.tokens });
      await authService.signIn(context.signInBody);
      expect(cognito.signIn).toHaveBeenCalledWith(context.signInBody);
    });

    it('Calls the session manager in order to set the session object in redis', async () => {
      mocked(cognito.signIn).mockResolvedValue({ session: context.session, tokens: context.tokens });

      await authService.signIn(context.signInBody);

      expect(SessionManager.set).toHaveBeenCalledWith(context.session);
    });

    it('Returns the idToken and refreshToken generated by cognito', async () => {
      mocked(cognito.signIn).mockResolvedValue({ session: context.session, tokens: context.tokens });

      const signInResult = await authService.signIn(context.signInBody);

      expect(signInResult).toBe(context.tokens);
    });
  });
});
